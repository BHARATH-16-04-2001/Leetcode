# ------	optimal approach ---------------
def sortedArray(a: [int], b: [int]) -> [int]:
    i = 0
    j = 0 
    union = []
    n1 = len(a)
    n2 = len(b)

    while i<n1 and j<n2:
        if a[i] <= b[j]:
            if len(union) == 0 or union[-1] != a[i]:
                union.append(a[i])
            i += 1
        else:
            if len(union) == 0 or union[-1] != b[j]:
                union.append(b[j])
            j += 1

    # If any elements left in list a
    while i < n1:    
        if union[-1] != a[i]:
            union.append(a[i])
        i += 1

    # If any elements left in list b
    while j < n2:  
        if union[-1] != b[j]:
            union.append(b[j])
        j += 1
    return union

#-------- basic approach ---------------
def sortedArray(a: [int], b: [int]) -> [int]:
    # Brute force approch
    temp = set()
    n = len(a)
    n1 = len(b)
    for i in range(n):
        temp.add(a[i])

    for i in range(n1):
        temp.add(b[i])
    return temp
    pass
