class Solution:
# 	def minJumps(self, arr):
	    # code here
	   # return self.helper(arr,0)
        
    # idx = 0    
    # def helper(self, arr, idx):
    #     n = len(arr)
    #     if idx >= n - 1:
    #         return 0
            
    #     if arr[idx] == 0:
    #         return -1
        
    #     min_jumps = float('inf')
        
    #     for i in range(1, arr[idx] + 1):
    #         jumps = self.helper(arr, i+idx) 
            
    #         if jumps != float('inf'):
    #             min_jumps = min(min_jumps, jumps + 1)
                
    #     return min_jumps
    
    
    def minJumps(self, arr):
        
        n = len(arr)
        
        if n == 1:
            return 0
            
        if arr[0] == 0:
            return -1
            
        
        max_reach = arr[0]
        step = arr[0]
        jump = 1
        
        for i in range(1, n+1):
            if i == n-1:
                return jump
                
            max_reach = max(max_reach, i + arr[i])
            step -= 1
            
            if step == 0:
                jump += 1
                step = max_reach - i
                
                if i >= max_reach:
                    return -1
        return -1        
            